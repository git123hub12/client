import * as React from "react";
import AppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Container from "@mui/material/Container";
import Button from "@mui/material/Button";
import { useTheme } from "@mui/material/styles";
import { useNavigate } from "react-router-dom";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import { getDataFromLocalStorage } from "../../localStorageComp/storage";
import Person2TwoToneIcon from "@mui/icons-material/Person2TwoTone";
import { Box } from "@mui/material";
import { ssoLogout } from "../../controller/registerController";
import LogoutTwoToneIcon from "@mui/icons-material/LogoutTwoTone";
import { useData } from "../../context/dataContext";
import useMediaQuery from "@mui/material/useMediaQuery";
import Divider from '@material-ui/core/Divider';
import axios from 'axios';


interface ProductAppBarProps {
  open?: boolean;
  setOpen?: (b: boolean) => void;
  showMenu: boolean;
}

const ProductAppBar: React.FC<ProductAppBarProps> = ({
  open,
  setOpen,
  showMenu,
}) => {
  const userData = getDataFromLocalStorage("user");
  const [fullName, setFullName] = React.useState("");
  const navigate = useNavigate();
  const theme = useTheme();
  const { setGlobalData } = useData();
  const [dialogOpen, setDialogOpen] = React.useState(false);
  const [fullName, setFullName] = React.useState("");

  React.useEffect(() => {
    const fetchUserDetails = async () => {
      if (userData && userData.id) {
        try {
          const response = await axios.get(`http://localhost:8000/api/userDetails/${userData.id}`);
          if (response.data.status === 'SUCCESS') {
            const { userDetail } = response.data.data;
            if (userDetail) {
              setFullName(`${userDetail.firstName} ${userDetail.lastName}`);
            }
          }
        } catch (error) {
          console.error("Error fetching user details:", error);
        }
      }
    };

    fetchUserDetails();
  }, [userData]);

  const boldDividerStyles = {
    backgroundColor: '#0085fe',
    height: 3,
    fontWeight: 'bold'
  };

  const handleLogoClick = () => {
    navigate("/notes");
  };
  
  const toggleDrawer = (newOpen: boolean) => () => {
    setOpen && setOpen(newOpen);
  };

  const handleOpenUserMenu = () => {
    navigate("/profile");
  };

  const handleLogout = async () => {
    try {
      await ssoLogout();
      localStorage.removeItem("user");
      navigate("/"); // Redirect to the home page after logout
    } catch (error) {
      console.error("Error while logging out the user:", error);
    }
  };

  return (
    <Box>
      <AppBar 
        position="static"
        sx={{ background: "#FFFFFF" }}
      >
        <Container maxWidth="xl">
          <Toolbar
            disableGutters
            sx={{ display: "flex", justifyContent: "space-between" }}
          >
            <Box
              sx={{ display: "flex", alignItems: "center" }}
            >
              {showMenu && (
                <IconButton
                  onClick={toggleDrawer(true)}
                  size="large"
                  edge="start"
                  color="inherit"
                  aria-label="menu"
                  sx={{ mr: 2, display: { xs: "block", sm: "block", md: "none" } }}
                >
                  <MenuIcon style={{ color: '#0085FE', fontSize: 40 }} />
                </IconButton>
              )}
              <Box
                sx={{ display: "flex", cursor: "pointer" }}
                onClick={handleLogoClick}
              >
                <img
                  alt="Logo"
                  onClick={handleLogoClick}
                  src="/images/icon_light-removebg-preview.png"
                  style={{ width: "65px" }}
                />
                <Typography
                  variant="h5"
                  noWrap
                  component="a"
                  sx={{
                    display: { xs: "none", md: "flex" },
                    fontFamily: "Arial",
                    fontWeight: 700,
                    letterSpacing: ".2rem",
                    mt: "6.5%",
                    color: "#1B5AAD",
                    textDecoration: "none",
                  }}
                >
                  QureNote AI
                </Typography>
                <Typography
                  variant="h5"
                  noWrap
                  component="a"
                  href="#app-bar-with-responsive-menu"
                  sx={{
                    display: { xs: "flex", md: "none" },
                    flexGrow: 1,
                    fontFamily: "Arial",
                    fontWeight: 700,
                    letterSpacing: ".2rem",
                    color: "inherit",
                    textDecoration: "none",
                  }}
                >
                  QureNote AI
                </Typography>
              </Box>
            </Box>
            <Typography
              variant="h6"
              noWrap
              component="div"
              sx={{ flexGrow: 1, textAlign: 'center', color: '#000' }}
            >
              {fullName}
            </Typography>
            {userData?.token && (
              <Box>
                <IconButton
                  sx={{ ml: 1, color: "#0085FE" }}
                  onClick={() => {
                    setGlobalData((prev) => ({
                      ...prev,
                      mode: prev.mode === "light" ? "dark" : "light",
                    }));
                  }}
                >
                </IconButton>
                <Button
                  onClick={handleOpenUserMenu}
                  sx={{ color: "#0085FE" }}
                >
                  <Person2TwoToneIcon />
                </Button>
                <Button
                  onClick={handleLogout}
                  sx={{ color: "#0085FE" }}
                >
                  <LogoutTwoToneIcon />
                </Button>
              </Box>
            )}
          </Toolbar>
        </Container>
      </AppBar>
      <Divider style={boldDividerStyles} />
    </Box>
  );
};

export default ProductAppBar;
